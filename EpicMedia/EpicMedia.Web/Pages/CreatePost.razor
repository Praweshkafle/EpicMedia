@page "/createpost"
@using EpicMedia.Models.Dto;
@inject IPostService _postService;
@inject AuthenticationStateProvider authProvider;
@using EpicMedia.Web.Services.Interface;
@using System.Security.Claims;
<style>

    ::selection {
        color: #fff;
        background: #1a81ff;
    }

    .container-modal {
        width: 500px;
        height: 480px;
        overflow: hidden;
        background: #fff;
        border-radius: 10px;
        transition: height 0.2s ease;
        box-shadow: 0 12px 28px rgba(0, 0, 0, 0.12);
    }

        .container-modal.active {
            height: 590px;
        }

        .container-modal .wrapper {
            width: 1000px;
            display: flex;
        }

            .container-modal .wrapper section {
                width: 500px;
                background: #fff;
            }

        .container-modal img {
            cursor: pointer;
        }

        .container-modal .post {
            transition: margin-left 0.18s ease;
        }

        .container-modal.active .post {
            margin-left: -500px;
        }

    .post header {
        font-size: 22px;
        font-weight: 600;
        padding: 17px 0;
        text-align: center;
        border-bottom: 1px solid #bfbfbf;
    }

    .post form {
        margin: 20px 25px;
    }

        .post form .content,
        .audience .list li .column {
            display: flex;
            align-items: center;
        }

            .post form .content img {
                cursor: default;
                max-width: 52px;
            }

            .post form .content .details {
                margin: -3px 0 0 12px;
            }

    form .content .details p {
        font-size: 17px;
        font-weight: 500;
    }

    .content .details .privacy {
        display: flex;
        height: 25px;
        cursor: pointer;
        padding: 0 10px;
        font-size: 11px;
        margin-top: 3px;
        border-radius: 5px;
        align-items: center;
        max-width: 98px;
        background: #E4E6EB;
        justify-content: space-between;
    }

    .details .privacy span {
        font-size: 13px;
        margin-top: 1px;
        font-weight: 500;
    }

    .details .privacy i:last-child {
        font-size: 13px;
        margin-left: 1px;
    }

    form :where(textarea, button) {
        width: 100%;
        outline: none;
        border: none;
    }

    form textarea {
        resize: none;
        font-size: 18px;
        margin-top: 30px;
        min-height: 100px;
    }

        form textarea::placeholder {
            color: #858585;
        }

        form textarea:focus::placeholder {
            color: #b3b3b3;
        }

    form :where(.theme-emoji, .options) {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .theme-emoji img:last-child {
        max-width: 24px;
    }

    form .options {
        height: 57px;
        margin: 15px 0;
        padding: 0 15px;
        border-radius: 7px;
        border: 1px solid #B9B9B9;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    }

        form .options :where(.list, li),
        .audience :where(.arrow-back, .icon, li .radio) {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        form .options p {
            color: #595959;
            font-size: 15px;
            font-weight: 500;
            cursor: default;
        }

        form .options .list {
            list-style: none;
        }

    .options .list li {
        height: 42px;
        width: 42px;
        margin: 0 -1px;
        cursor: pointer;
        border-radius: 50%;
    }

        .options .list li:hover {
            background: #f0f1f4;
        }

        .options .list li img {
            width: 23px;
        }

    form button {
        height: 53px;
        color: #fff;
        font-size: 18px;
        font-weight: 500;
        cursor: pointer;
        color: #BCC0C4;
        cursor: no-drop;
        border-radius: 7px;
        background: #e2e5e9;
        transition: all 0.3s ease;
    }

    form textarea:valid ~ button {
        color: #fff;
        cursor: pointer;
        background: #4599FF;
    }

        form textarea:valid ~ button:hover {
            background: #1a81ff;
        }

</style>

<div class="modal fade show" id="exampleModalCenter" tabindex="-1" style="display:block; background-color:rgba(10,10,10,0.8)" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="wrapper">
                <section class="post">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLongTitle">Create Post</h5>
                        <button type="button" class="close" data-dismiss="modal" @onclick="@(()=> ModalCancle())" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <EditForm Model="@Post" OnValidSubmit="addPost" OnInvalidSubmit="addPost">
                        <div class="content">
                            <img src="https://placekitten.com/50/50" alt="logo">
                            <div class="details">
                                <p>@UserName</p>
                            </div>
                        </div>
                        <textarea placeholder="What's on your mind, @UserName?" spellcheck="false" @bind="@Post.Content" required></textarea>
                        <div class="">
                            <img src="@postImg" />
                            @if (hideRemove)
                            {
                                <button class="btn btn-danger h-25" @onclick="(()=> handleRemoveButton())" style="width:100px">Remove</button>
                            }
                        </div>
                        <div class="options align-items-center">
                            <InputFile @key="@_inputFileId" OnChange="handleFileChange"></InputFile>
                            <i for="postimg" class="fa fa-image"></i>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary">Post</button>
                        </div>
                    </EditForm>
                </section>
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }
    [Parameter]
    public string UserId { get; set; }
    private string UserName;

    bool hideRemove = false;
    string successMessage { get; set; }
    IBrowserFile selectedFile { get; set; }
    int maxFileSize = 1 * 1024 * 1024;
    string postImg = "";
    public PostDto Post = new PostDto();
    private string _inputFileId = Guid.NewGuid().ToString();
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();


    protected override async Task OnInitializedAsync()
    {
        UserName = await GetUserName();
    }


    async Task handleRemoveButton()
    {
        hideRemove = false;
        selectedFile = null;
        await handleFileChange(null);
    }
    async Task<string> GetUserId()
    {
        var authState = await authProvider
             .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            claims = user.Claims.ToList();
            var userid = claims.Where(a => a.Type == "Id").Select(b => b.Value).FirstOrDefault();
            return userid;
        }
        return "";
    }

    async Task<string> GetUserName()
    {
        var authState = await authProvider
             .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            claims = user.Claims.ToList();
            var userid = claims.Where(a => a.Type == "UserName").Select(b => b.Value).FirstOrDefault();
            return userid;
        }
        return "";
    }

    public async Task handleFileChange(InputFileChangeEventArgs eventArgs)
    {
        if (eventArgs == null)
        {
            postImg = "";
            selectedFile = null;
            _inputFileId = Guid.NewGuid().ToString();
        }

        selectedFile = eventArgs.File;

        var image = await eventArgs.File.RequestImageFileAsync("image/png", 100, 150);

        using Stream imageStream = image.OpenReadStream(1024 * 1024 * 10);

        using MemoryStream ms = new();
        await imageStream.CopyToAsync(ms);

        postImg = $"data:image/png;base64,{Convert.ToBase64String(ms.ToArray())}";
        hideRemove = true;
        StateHasChanged();
    }

    public async Task addPost()
    {
        try
        {
            string userId = await GetUserId();
            var post = new PostDto
                {
                    Content = Post.Content,
                    CreatedAt = DateTime.Now,
                    User=userId,
                };
            if (post != null)
            {
                var result= await _postService.PostAsync(post, selectedFile);
                if (result.Success)
                {
                    successMessage = result.Message;
                    await OnClose.InvokeAsync(false);
                }
                else
                {
                    successMessage = result.Message;
                }
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    private Task ModalCancle()
    {
        return OnClose.InvokeAsync(false);
    }

    private Task ModalOk()
    {
        return OnClose.InvokeAsync(true);
    }
}